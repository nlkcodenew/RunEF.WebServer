@model DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="row mb-4">
    <div class="col-12">
        <h2><i class="fas fa-tachometer-alt me-2"></i>Dashboard</h2>
        <p class="text-muted">RunEF Server Management Dashboard - <span id="connectionStatus" class="badge bg-secondary">Connecting...</span></p>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title" id="totalClients">@Model.TotalClients</h4>
                        <p class="card-text">Total Clients</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-desktop fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title" id="onlineClients">@Model.OnlineClients.Count</h4>
                        <p class="card-text">Online Clients</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-wifi fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title" id="offlineClients">@(Model.TotalClients - Model.OnlineClients.Count)</h4>
                        <p class="card-text">Offline Clients</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-exclamation-triangle fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card bg-info text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title" id="serverTime">@DateTime.Now.ToString("HH:mm")</h4>
                        <p class="card-text">Server Time</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-clock fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-chart-line me-2"></i>Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <a href="@Url.Action("Index", "Clients")" class="btn btn-outline-primary btn-lg w-100">
                            <i class="fas fa-desktop fa-2x d-block mb-2"></i>
                            Manage Clients
                        </a>
                    </div>
                    <div class="col-md-4 mb-3">
                        <button class="btn btn-outline-success btn-lg w-100" onclick="refreshData()">
                            <i class="fas fa-sync-alt fa-2x d-block mb-2"></i>
                            Refresh Data
                        </button>
                    </div>
                    <div class="col-md-4 mb-3">
                        <button class="btn btn-outline-info btn-lg w-100" onclick="toggleLogs()">
                            <i class="fas fa-file-alt fa-2x d-block mb-2"></i>
                            <span id="logsToggleText">Show Logs</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-activity me-2"></i>System Status</h5>
            </div>
            <div class="card-body">
                <div class="mb-2">
                    <small class="text-muted">Last Update:</small>
                    <div id="lastUpdate">@DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")</div>
                </div>
                <div class="mb-2">
                    <small class="text-muted">Active Connections:</small>
                    <div id="activeConnections">1</div>
                </div>
                <div>
                    <small class="text-muted">Server Status:</small>
                    <div><span class="badge bg-success">Running</span></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row" id="logsSection" style="display: none;">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5><i class="fas fa-file-alt me-2"></i>System Logs</h5>
                <button class="btn btn-sm btn-outline-secondary" onclick="clearLogs()">
                    <i class="fas fa-trash me-1"></i>Clear
                </button>
            </div>
            <div class="card-body">
                <div id="logsContainer" style="height: 300px; overflow-y: auto; background-color: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px;">
                    <div class="log-entry text-info">[$(new Date().toLocaleString())] System started</div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let connection;
        let logsVisible = false;
        
        // Initialize SignalR connection
        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/monitoringHub")
                .withAutomaticReconnect()
                .build();

            // Connection events
            connection.start().then(function () {
                document.getElementById('connectionStatus').textContent = 'Connected';
                document.getElementById('connectionStatus').className = 'badge bg-success';
                addLog('Connected to real-time monitoring', 'success');
            }).catch(function (err) {
                document.getElementById('connectionStatus').textContent = 'Disconnected';
                document.getElementById('connectionStatus').className = 'badge bg-danger';
                addLog('Failed to connect: ' + err.toString(), 'error');
            });

            connection.onreconnecting(function () {
                document.getElementById('connectionStatus').textContent = 'Reconnecting...';
                document.getElementById('connectionStatus').className = 'badge bg-warning';
            });

            connection.onreconnected(function () {
                document.getElementById('connectionStatus').textContent = 'Connected';
                document.getElementById('connectionStatus').className = 'badge bg-success';
                addLog('Reconnected to monitoring', 'success');
            });

            connection.onclose(function () {
                document.getElementById('connectionStatus').textContent = 'Disconnected';
                document.getElementById('connectionStatus').className = 'badge bg-danger';
            });

            // Listen for dashboard updates
            connection.on("DashboardUpdated", function (dashboard) {
                updateDashboard(dashboard);
            });

            // Listen for client status changes
            connection.on("ClientStatusChanged", function (data) {
                addLog(`Client ${data.ClientId} is now ${data.IsOnline ? 'online' : 'offline'}`, data.IsOnline ? 'success' : 'warning');
            });

            // Listen for system logs
            connection.on("SystemLog", function (log) {
                addLog(log.Message, log.Level.toLowerCase());
            });
        }
        
        function updateDashboard(dashboard) {
            document.getElementById('totalClients').textContent = dashboard.TotalClients;
            document.getElementById('onlineClients').textContent = dashboard.OnlineClients;
            document.getElementById('offlineClients').textContent = dashboard.TotalClients - dashboard.OnlineClients;
            document.getElementById('lastUpdate').textContent = new Date().toLocaleString();
        }
        
        function addLog(message, level = 'info') {
            const logsContainer = document.getElementById('logsContainer');
            const timestamp = new Date().toLocaleString();
            const logClass = {
                'info': 'text-info',
                'success': 'text-success',
                'warning': 'text-warning',
                'error': 'text-danger'
            }[level] || 'text-info';
            
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry ${logClass}`;
            logEntry.textContent = `[${timestamp}] ${message}`;
            
            logsContainer.appendChild(logEntry);
            logsContainer.scrollTop = logsContainer.scrollHeight;
            
            // Keep only last 100 log entries
            const logEntries = logsContainer.querySelectorAll('.log-entry');
            if (logEntries.length > 100) {
                logEntries[0].remove();
            }
        }
        
        function refreshData() {
            location.reload();
        }
        
        function toggleLogs() {
            const logsSection = document.getElementById('logsSection');
            const toggleText = document.getElementById('logsToggleText');
            
            if (logsVisible) {
                logsSection.style.display = 'none';
                toggleText.textContent = 'Show Logs';
                logsVisible = false;
            } else {
                logsSection.style.display = 'block';
                toggleText.textContent = 'Hide Logs';
                logsVisible = true;
            }
        }
        
        function clearLogs() {
            document.getElementById('logsContainer').innerHTML = '';
            addLog('Logs cleared', 'info');
        }
        
        // Update server time every second
        setInterval(function() {
            document.getElementById('serverTime').textContent = new Date().toLocaleTimeString('en-GB', { hour12: false }).substring(0, 5);
        }, 1000);
        
        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeSignalR();
        });
    </script>
}