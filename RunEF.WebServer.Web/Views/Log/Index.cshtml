@model RunEF.WebServer.Web.Models.LogViewModel
@{
    ViewData["Title"] = "System Logs";
    Layout = "_Layout";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0">
                    <i class="fas fa-file-alt text-primary me-2"></i>
                    System Logs
                </h2>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-primary" onclick="refreshLogs()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                    <button type="button" class="btn btn-outline-success" onclick="exportLogs()">
                        <i class="fas fa-download"></i> Export
                    </button>
                    <button type="button" class="btn btn-outline-warning" onclick="clearLogs()">
                        <i class="fas fa-trash"></i> Clear Logs
                    </button>
                    <button type="button" class="btn btn-outline-info" onclick="simulateSystemLogs()">
                        <i class="fas fa-cogs"></i> Simulate
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-0">Total Logs</h6>
                            <h3 class="mb-0" id="totalLogs">@Model.TotalLogs</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-list fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-0">Error Logs</h6>
                            <h3 class="mb-0" id="errorLogs">@Model.ErrorLogs</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-triangle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-0">Warning Logs</h6>
                            <h3 class="mb-0" id="warningLogs">@Model.WarningLogs</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-circle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-0">Last Updated</h6>
                            <h6 class="mb-0" id="lastUpdated">@Model.LastUpdated.ToString("HH:mm:ss")</h6>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clock fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Log Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-filter me-2"></i>
                        Log Filters
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="levelFilter" class="form-label">Log Level</label>
                            <select class="form-select" id="levelFilter" onchange="applyFilters()">
                                <option value="">All Levels</option>
                                <option value="Error">Error</option>
                                <option value="Warning">Warning</option>
                                <option value="Information">Information</option>
                                <option value="Debug">Debug</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="sourceFilter" class="form-label">Source</label>
                            <select class="form-select" id="sourceFilter" onchange="applyFilters()">
                                <option value="">All Sources</option>
                                <option value="System">System</option>
                                <option value="Application">Application</option>
                                <option value="Security">Security</option>
                                <option value="Database">Database</option>
                                <option value="Network">Network</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="categoryFilter" class="form-label">Category</label>
                            <select class="form-select" id="categoryFilter" onchange="applyFilters()">
                                <option value="">All Categories</option>
                                <option value="Authentication">Authentication</option>
                                <option value="Authorization">Authorization</option>
                                <option value="Performance">Performance</option>
                                <option value="Error">Error</option>
                                <option value="Audit">Audit</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="searchText" class="form-label">Search</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchText" placeholder="Search logs..." onkeyup="applyFilters()">
                                <button class="btn btn-outline-secondary" type="button" onclick="clearFilters()">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Log Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list me-2"></i>
                        Log Entries
                        <span class="badge bg-secondary ms-2" id="logCount">@Model.LogEntries.Count</span>
                    </h5>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="autoRefresh" checked>
                        <label class="form-check-label" for="autoRefresh">
                            Auto Refresh
                        </label>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
                        <table class="table table-striped table-hover mb-0" id="logTable">
                            <thead class="table-dark sticky-top">
                                <tr>
                                    <th style="width: 150px;">Timestamp</th>
                                    <th style="width: 80px;">Level</th>
                                    <th style="width: 100px;">Source</th>
                                    <th style="width: 100px;">Category</th>
                                    <th>Message</th>
                                    <th style="width: 100px;">User</th>
                                    <th style="width: 80px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="logTableBody">
                                @foreach (var log in Model.LogEntries.OrderByDescending(l => l.Timestamp).Take(100))
                                {
                                    <tr data-level="@log.Level" data-source="@log.Source" data-category="@log.Category">
                                        <td class="text-nowrap">
                                            <small>@log.Timestamp.ToString("MM/dd HH:mm:ss")</small>
                                        </td>
                                        <td>
                                            <span class="badge @log.LevelBadge">@log.Level</span>
                                        </td>
                                        <td>
                                            <small>@log.Source</small>
                                        </td>
                                        <td>
                                            <small>@log.Category</small>
                                        </td>
                                        <td>
                                            <div class="log-message" title="@log.Message">
                                                @log.Message
                                            </div>
                                        </td>
                                        <td>
                                            <small>@(log.UserId ?? "System")</small>
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-info" onclick="showLogDetails('@log.Id')" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Log Details Modal -->
<div class="modal fade" id="logDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-info-circle me-2"></i>
                    Log Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="logDetailsContent">
                <!-- Log details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-download me-2"></i>
                    Export Logs
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="exportFormat" class="form-label">Export Format</label>
                    <select class="form-select" id="exportFormat">
                        <option value="csv">CSV</option>
                        <option value="json">JSON</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="exportDateRange" class="form-label">Date Range</label>
                    <select class="form-select" id="exportDateRange">
                        <option value="today">Today</option>
                        <option value="week">Last 7 Days</option>
                        <option value="month">Last 30 Days</option>
                        <option value="all">All Logs</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="performExport()">Export</button>
            </div>
        </div>
    </div>
</div>

<style>
.log-message {
    max-width: 300px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.table-responsive {
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
}

.badge {
    font-size: 0.75em;
}

.card {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border: 1px solid rgba(0, 0, 0, 0.125);
}

.btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
}

#logTable tbody tr:hover {
    background-color: rgba(0, 123, 255, 0.1);
}

.sticky-top {
    position: sticky;
    top: 0;
    z-index: 10;
}
</style>

@section Scripts {
    <script>
        let connection;
        let autoRefreshEnabled = true;
        let currentFilters = {
            level: '',
            source: '',
            category: '',
            search: ''
        };

        $(document).ready(function() {
            initializeSignalR();
            setupAutoRefresh();
        });

        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/monitoringHub")
                .build();

            connection.start().then(function () {
                console.log('SignalR Connected for Log monitoring');
            }).catch(function (err) {
                console.error('SignalR Connection Error: ', err);
            });

            // Listen for new log entries
            connection.on("NewLogEntry", function (logEntry) {
                addNewLogEntry(logEntry);
                updateLogStats();
            });

            // Listen for log stats updates
            connection.on("LogStatsUpdated", function (stats) {
                updateLogStatsDisplay(stats);
            });
        }

        function addNewLogEntry(logEntry) {
            if (!autoRefreshEnabled) return;

            const tableBody = document.getElementById('logTableBody');
            const newRow = createLogRow(logEntry);
            
            // Insert at the beginning
            tableBody.insertBefore(newRow, tableBody.firstChild);
            
            // Remove last row if we have too many
            const rows = tableBody.querySelectorAll('tr');
            if (rows.length > 100) {
                tableBody.removeChild(rows[rows.length - 1]);
            }

            // Apply current filters
            applyFiltersToRow(newRow);
        }

        function createLogRow(log) {
            const row = document.createElement('tr');
            row.setAttribute('data-level', log.level);
            row.setAttribute('data-source', log.source);
            row.setAttribute('data-category', log.category);
            
            const timestamp = new Date(log.timestamp);
            const timeString = timestamp.toLocaleDateString('en-US', {
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false
            });

            row.innerHTML = `
                <td class="text-nowrap">
                    <small>${timeString}</small>
                </td>
                <td>
                    <span class="badge ${getLevelBadgeClass(log.level)}">${log.level}</span>
                </td>
                <td>
                    <small>${log.source}</small>
                </td>
                <td>
                    <small>${log.category}</small>
                </td>
                <td>
                    <div class="log-message" title="${log.message}">
                        ${log.message}
                    </div>
                </td>
                <td>
                    <small>${log.userId || 'System'}</small>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-outline-info" onclick="showLogDetails('${log.id}')" title="View Details">
                        <i class="fas fa-eye"></i>
                    </button>
                </td>
            `;
            
            return row;
        }

        function getLevelBadgeClass(level) {
            switch (level.toLowerCase()) {
                case 'error': return 'bg-danger';
                case 'warning': return 'bg-warning';
                case 'information': return 'bg-info';
                case 'debug': return 'bg-secondary';
                default: return 'bg-primary';
            }
        }

        function setupAutoRefresh() {
            const autoRefreshCheckbox = document.getElementById('autoRefresh');
            autoRefreshCheckbox.addEventListener('change', function() {
                autoRefreshEnabled = this.checked;
            });
        }

        function refreshLogs() {
            fetch('/Log/GetLogs')
                .then(response => response.json())
                .then(data => {
                    updateLogTable(data.logs);
                    updateLogStatsDisplay(data.stats);
                    updateLastUpdated();
                })
                .catch(error => {
                    console.error('Error refreshing logs:', error);
                    showNotification('Error refreshing logs', 'error');
                });
        }

        function updateLogTable(logs) {
            const tableBody = document.getElementById('logTableBody');
            tableBody.innerHTML = '';
            
            logs.slice(0, 100).forEach(log => {
                const row = createLogRow(log);
                tableBody.appendChild(row);
            });
            
            applyFilters();
        }

        function updateLogStats() {
            fetch('/Log/GetLogStats')
                .then(response => response.json())
                .then(stats => {
                    updateLogStatsDisplay(stats);
                })
                .catch(error => {
                    console.error('Error updating log stats:', error);
                });
        }

        function updateLogStatsDisplay(stats) {
            document.getElementById('totalLogs').textContent = stats.totalLogs;
            document.getElementById('errorLogs').textContent = stats.errorLogs;
            document.getElementById('warningLogs').textContent = stats.warningLogs;
            updateLastUpdated();
        }

        function updateLastUpdated() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('en-US', { hour12: false });
            document.getElementById('lastUpdated').textContent = timeString;
        }

        function applyFilters() {
            currentFilters.level = document.getElementById('levelFilter').value;
            currentFilters.source = document.getElementById('sourceFilter').value;
            currentFilters.category = document.getElementById('categoryFilter').value;
            currentFilters.search = document.getElementById('searchText').value.toLowerCase();

            const rows = document.querySelectorAll('#logTableBody tr');
            let visibleCount = 0;
            
            rows.forEach(row => {
                if (applyFiltersToRow(row)) {
                    visibleCount++;
                }
            });
            
            document.getElementById('logCount').textContent = visibleCount;
        }

        function applyFiltersToRow(row) {
            const level = row.getAttribute('data-level');
            const source = row.getAttribute('data-source');
            const category = row.getAttribute('data-category');
            const message = row.querySelector('.log-message').textContent.toLowerCase();
            
            const levelMatch = !currentFilters.level || level === currentFilters.level;
            const sourceMatch = !currentFilters.source || source === currentFilters.source;
            const categoryMatch = !currentFilters.category || category === currentFilters.category;
            const searchMatch = !currentFilters.search || message.includes(currentFilters.search);
            
            const visible = levelMatch && sourceMatch && categoryMatch && searchMatch;
            row.style.display = visible ? '' : 'none';
            
            return visible;
        }

        function clearFilters() {
            document.getElementById('levelFilter').value = '';
            document.getElementById('sourceFilter').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('searchText').value = '';
            applyFilters();
        }

        function showLogDetails(logId) {
            // For now, show a placeholder. In a real implementation,
            // you would fetch detailed log information from the server
            const content = `
                <div class="row">
                    <div class="col-md-6">
                        <strong>Log ID:</strong> ${logId}
                    </div>
                    <div class="col-md-6">
                        <strong>Timestamp:</strong> ${new Date().toLocaleString()}
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-12">
                        <strong>Full Message:</strong>
                        <div class="mt-2 p-3 bg-light border rounded">
                            Detailed log information would be displayed here...
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <strong>Stack Trace:</strong>
                        <div class="mt-2 p-3 bg-light border rounded">
                            <code>Stack trace information would be displayed here...</code>
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('logDetailsContent').innerHTML = content;
            new bootstrap.Modal(document.getElementById('logDetailsModal')).show();
        }

        function exportLogs() {
            new bootstrap.Modal(document.getElementById('exportModal')).show();
        }

        function performExport() {
            const format = document.getElementById('exportFormat').value;
            const dateRange = document.getElementById('exportDateRange').value;
            
            const url = `/Log/ExportLogs?format=${format}&dateRange=${dateRange}`;
            window.open(url, '_blank');
            
            bootstrap.Modal.getInstance(document.getElementById('exportModal')).hide();
            showNotification('Export started', 'success');
        }

        function clearLogs() {
            if (confirm('Are you sure you want to clear all logs? This action cannot be undone.')) {
                fetch('/Log/ClearLogs', { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            refreshLogs();
                            showNotification('Logs cleared successfully', 'success');
                        } else {
                            showNotification('Error clearing logs', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error clearing logs:', error);
                        showNotification('Error clearing logs', 'error');
                    });
            }
        }

        function simulateSystemLogs() {
            fetch('/Log/SimulateSystemLogs', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('System logs simulation started', 'info');
                    } else {
                        showNotification('Error starting simulation', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error starting simulation:', error);
                    showNotification('Error starting simulation', 'error');
                });
        }

        function showNotification(message, type) {
            // Simple notification system
            const alertClass = type === 'error' ? 'alert-danger' : 
                              type === 'success' ? 'alert-success' : 
                              type === 'info' ? 'alert-info' : 'alert-primary';
            
            const notification = $(`
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);
            
            $('body').append(notification);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                notification.alert('close');
            }, 5000);
        }
    </script>
}