@model List<ClientModel>
@{
    ViewData["Title"] = "Clients Management";
}

<div class="row mb-4">
    <div class="col-12">
        <h2><i class="fas fa-desktop me-2"></i>Clients Management</h2>
        <p class="text-muted">Manage and monitor all connected clients</p>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="mb-0" id="totalClients">@Model.Count</h4>
                        <p class="mb-0">Total Clients</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-desktop fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="mb-0" id="onlineClients">@Model.Count(c => c.IsOnline)</h4>
                        <p class="mb-0">Online</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-circle fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-danger text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="mb-0" id="offlineClients">@Model.Count(c => !c.IsOnline)</h4>
                        <p class="mb-0">Offline</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-times-circle fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="mb-0" id="blockedClients">@Model.Count(c => c.IsBlocked)</h4>
                        <p class="mb-0">Blocked</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-ban fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-4">
        <div class="input-group">
            <span class="input-group-text"><i class="fas fa-search"></i></span>
            <input type="text" class="form-control" id="searchInput" placeholder="Search clients...">
        </div>
    </div>
    <div class="col-md-4">
        <div class="btn-group" role="group" aria-label="Filter clients">
            <button type="button" class="btn btn-outline-secondary active" onclick="filterClients('all')" id="filterAll">
                <i class="fas fa-list me-1"></i>All
            </button>
            <button type="button" class="btn btn-outline-success" onclick="filterClients('online')" id="filterOnline">
                <i class="fas fa-circle me-1"></i>Online
            </button>
            <button type="button" class="btn btn-outline-danger" onclick="filterClients('offline')" id="filterOffline">
                <i class="fas fa-times-circle me-1"></i>Offline
            </button>
            <button type="button" class="btn btn-outline-warning" onclick="filterClients('blocked')" id="filterBlocked">
                <i class="fas fa-ban me-1"></i>Blocked
            </button>
        </div>
    </div>
    <div class="col-md-4 text-end">
        <button class="btn btn-success" onclick="refreshClients()">
            <i class="fas fa-sync-alt me-1"></i>Refresh
        </button>
        <button class="btn btn-primary" onclick="addClient()">
            <i class="fas fa-plus me-1"></i>Add Client
        </button>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="clientsTable">
                <thead class="table-dark">
                    <tr>
                        <th><i class="fas fa-hashtag me-1"></i>ID</th>
                        <th><i class="fas fa-desktop me-1"></i>Computer Code</th>
                        <th><i class="fas fa-network-wired me-1"></i>IP Address</th>
                        <th><i class="fas fa-user me-1"></i>Username</th>
                        <th><i class="fas fa-heartbeat me-1"></i>Status</th>
                        <th><i class="fas fa-clock me-1"></i>Last Heartbeat</th>
                        <th><i class="fas fa-cogs me-1"></i>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var client in Model)
                    {
                        <tr>
                            <td>@client.Id</td>
                            <td>
                                <strong>@client.ComputerCode</strong>
                            </td>
                            <td>
                                <span class="badge bg-info">@client.IpAddress</span>
                            </td>
                            <td>@client.Username</td>
                            <td>
                                @if (client.IsOnline)
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-circle me-1"></i>Online
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">
                                        <i class="fas fa-circle me-1"></i>Offline
                                    </span>
                                }
                                
                                @if (client.IsBlocked)
                                {
                                    <span class="badge bg-warning ms-1">
                                        <i class="fas fa-ban me-1"></i>Blocked
                                    </span>
                                }
                            </td>
                            <td>
                                @if (client.LastHeartbeat.HasValue)
                                {
                                    <small>@client.LastHeartbeat.Value.ToString("dd/MM/yyyy HH:mm:ss")</small>
                                }
                                else
                                {
                                    <small class="text-muted">Never</small>
                                }
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm" role="group">
                                    @if (client.IsBlocked)
                                    {
                                        <button class="btn btn-success" onclick="unblockClient(@client.Id)" title="Unblock">
                                            <i class="fas fa-unlock"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-warning" onclick="blockClient(@client.Id)" title="Block">
                                            <i class="fas fa-ban"></i>
                                        </button>
                                    }
                                    
                                    <button class="btn btn-info" onclick="viewClient(@client.Id)" title="View Details">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    
                                    <button class="btn btn-primary" onclick="updateHeartbeat(@client.Id)" title="Update Heartbeat">
                                        <i class="fas fa-heartbeat"></i>
                                    </button>
                                    
                                    <button class="btn btn-danger" onclick="deleteClient(@client.Id)" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        @if (!Model.Any())
        {
            <div class="text-center py-5">
                <i class="fas fa-desktop fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">No clients found</h5>
                <p class="text-muted">No clients are currently registered in the system.</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        let currentFilter = 'all';
        
        // Search functionality
        document.getElementById('searchInput').addEventListener('keyup', function() {
            applyFilters();
        });
        
        function applyFilters() {
            var searchFilter = document.getElementById('searchInput').value.toLowerCase();
            var rows = document.querySelectorAll('#clientsTable tbody tr');
            
            rows.forEach(function(row) {
                var text = row.textContent.toLowerCase();
                var showBySearch = text.includes(searchFilter);
                var showByStatus = true;
                
                if (currentFilter !== 'all') {
                    var statusCell = row.cells[4]; // Status column
                    var statusText = statusCell.textContent.toLowerCase();
                    
                    switch(currentFilter) {
                        case 'online':
                            showByStatus = statusText.includes('online') && !statusText.includes('blocked');
                            break;
                        case 'offline':
                            showByStatus = statusText.includes('offline');
                            break;
                        case 'blocked':
                            showByStatus = statusText.includes('blocked');
                            break;
                    }
                }
                
                row.style.display = (showBySearch && showByStatus) ? '' : 'none';
            });
        }
        
        function filterClients(status) {
            currentFilter = status;
            
            // Update button states
            document.querySelectorAll('.btn-group button').forEach(btn => {
                btn.classList.remove('active');
                btn.classList.add('btn-outline-secondary', 'btn-outline-success', 'btn-outline-danger', 'btn-outline-warning');
                btn.classList.remove('btn-secondary', 'btn-success', 'btn-danger', 'btn-warning');
            });
            
            var activeBtn = document.getElementById('filter' + status.charAt(0).toUpperCase() + status.slice(1));
            activeBtn.classList.add('active');
            
            switch(status) {
                case 'all':
                    activeBtn.classList.remove('btn-outline-secondary');
                    activeBtn.classList.add('btn-secondary');
                    break;
                case 'online':
                    activeBtn.classList.remove('btn-outline-success');
                    activeBtn.classList.add('btn-success');
                    break;
                case 'offline':
                    activeBtn.classList.remove('btn-outline-danger');
                    activeBtn.classList.add('btn-danger');
                    break;
                case 'blocked':
                    activeBtn.classList.remove('btn-outline-warning');
                    activeBtn.classList.add('btn-warning');
                    break;
            }
            
            applyFilters();
        }
        
        function refreshClients() {
            location.reload();
        }
        
        function addClient() {
            // Redirect to add client page or show modal
            alert('Add client functionality will be implemented!');
        }
        
        function blockClient(clientId) {
            if (confirm('Are you sure you want to block this client?')) {
                fetch(`/Clients/Block/${clientId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to block client');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred');
                });
            }
        }
        
        function unblockClient(clientId) {
            if (confirm('Are you sure you want to unblock this client?')) {
                fetch(`/Clients/Unblock/${clientId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to unblock client');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred');
                });
            }
        }
        
        function viewClient(clientId) {
            // Redirect to client details page
            window.location.href = `/Clients/Details/${clientId}`;
        }
        
        function updateHeartbeat(clientId) {
            fetch(`/Clients/UpdateHeartbeat/${clientId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to update heartbeat');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred');
            });
        }
        
        function deleteClient(clientId) {
            if (confirm('Are you sure you want to delete this client? This action cannot be undone.')) {
                fetch(`/Clients/Delete/${clientId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to delete client');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred');
                });
            }
        }
        
        // Auto refresh every 30 seconds
        setInterval(function() {
            location.reload();
        }, 30000);
    </script>
}